import 'dart:math' as math;

import 'package:flutter/material.dart';
import 'package:flutter_colorpicker/flutter_colorpicker.dart';
import 'package:flutter_painter_v2/flutter_painter.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:photo_view/photo_view.dart';
import 'package:swiss_app/views/home_page/widgets/player_card.dart';
import 'package:swiss_app/views/mandala_screens/widgets/earn_screen.dart';
import 'package:swiss_app/views/mandala_screens/widgets/win_screen.dart';

import '../../models/song_model.dart';

enum ColoringMode { fill, brush }

class ColoringScreen extends StatefulWidget {
  const ColoringScreen({super.key});

  @override
  State<ColoringScreen> createState() => _ColoringScreenState();
}

class _ColoringScreenState extends State<ColoringScreen> {
  PainterController controller = PainterController();
  Color pickerColor = Color(0xff443a49);
  Color currentColor = Color(0xff443a49);

  // selectedColor is what both fill & brush use
  Color selectedColor = Colors.red;
  ColoringMode mode = ColoringMode.fill;
  late Map<int, Color> polygonColors;
  int? selectedPolygon;
  Map<int, List<_Stroke>> strokesByPolygon = {};
  Map<int, List<List<_Stroke>>> undoStack = {};
  Map<int, List<List<_Stroke>>> redoStack = {};
  double brushWidth = 5.0;
  double zoom = 1.0;
  Offset panOffset = Offset.zero;
  bool _isDrawing = false;
  bool _isPanning = false;

  List<RegionInfo> regions = [];
  double scale = 1.0;
  double offsetX = 0.0;
  double offsetY = 0.0;

  final List<Map<String, dynamic>> polygonData = [
    {'label': 1,
    'points': [[284, 1],
      [0, 0],
      [1, 284],
      [3, 283],
      [6, 261],
      [15, 226],
      [32, 184],
      [55, 144],
      [73, 120],
      [90, 101],
      [125, 69],
      [150, 51],
      [172, 38],
      [199, 25],
      [226, 15],
      [261, 6],
      [283, 3]]},
    {'label': 2,
      'points': [[364, 1],
        [365, 3],
        [388, 6],
        [423, 15],
        [461, 30],
        [505, 55],
        [529, 73],
        [548, 90],
        [571, 114],
        [586, 133],
        [611, 172],
        [624, 199],
        [634, 226],
        [643, 261],
        [646, 284],
        [648, 285],
        [649, 0]]},
    {'label': 3,
      'points': [[286, 1],
        [283, 5],
        [252, 10],
        [215, 21],
        [165, 44],
        [114, 80],
        [71, 125],
        [36, 180],
        [16, 230],
        [5, 283],
        [1, 286],
        [1, 363],
        [5, 366],
        [10, 397],
        [21, 434],
        [44, 484],
        [80, 535],
        [124, 577],
        [180, 613],
        [230, 633],
        [284, 644],
        [287, 648],
        [362, 648],
        [364, 644],
        [397, 639],
        [434, 628],
        [484, 605],
        [535, 569],
        [577, 525],
        [615, 465],
        [635, 412],
        [644, 364],
        [648, 362],
        [648, 287],
        [644, 284],
        [639, 252],
        [628, 215],
        [605, 165],
        [569, 114],
        [524, 71],
        [469, 36],
        [416, 15],
        [365, 5],
        [362, 1]]},
    {'label': 4,
      'points': [[283, 36],
        [282, 37],
        [277, 39],
        [275, 41],
        [274, 41],
        [269, 46],
        [269, 47],
        [264, 56],
        [264, 58],
        [263, 59],
        [263, 65],
        [262, 66],
        [262, 71],
        [263, 72],
        [263, 78],
        [265, 81],
        [266, 86],
        [267, 87],
        [268, 90],
        [270, 92],
        [271, 95],
        [274, 98],
        [274, 99],
        [293, 117],
        [294, 117],
        [297, 120],
        [298, 120],
        [318, 140],
        [318, 141],
        [322, 146],
        [322, 148],
        [324, 150],
        [327, 150],
        [330, 147],
        [330, 146],
        [335, 140],
        [335, 139],
        [343, 131],
        [343, 130],
        [345, 128],
        [346, 128],
        [350, 124],
        [351, 124],
        [364, 112],
        [365, 112],
        [378, 99],
        [378, 98],
        [381, 95],
        [382, 92],
        [384, 90],
        [384, 89],
        [386, 86],
        [386, 84],
        [387, 83],
        [387, 81],
        [388, 80],
        [388, 73],
        [389, 72],
        [389, 65],
        [388, 64],
        [388, 57],
        [386, 54],
        [386, 52],
        [385, 51],
        [385, 50],
        [382, 47],
        [382, 46],
        [377, 41],
        [376, 41],
        [372, 38],
        [370, 38],
        [368, 36],
        [364, 36],
        [363, 35],
        [359, 35],
        [358, 36],
        [354, 36],
        [353, 37],
        [351, 37],
        [350, 38],
        [348, 38],
        [347, 39],
        [344, 40],
        [342, 42],
        [341, 42],
        [333, 50],
        [332, 53],
        [328, 57],
        [326, 57],
        [326, 58],
        [325, 59],
        [324, 58],
        [324, 57],
        [321, 55],
        [320, 52],
        [317, 49],
        [317, 48],
        [311, 42],
        [310, 42],
        [308, 40],
        [307, 40],
        [302, 37],
        [300, 37],
        [299, 36],
        [296, 36],
        [295, 35],
        [287, 35],
        [286, 36]]},
    {'label': 5,
      'points': [[216, 49],
        [215, 50],
        [213, 50],
        [212, 51],
        [211, 51],
        [209, 53],
        [208, 53],
        [208, 54],
        [206, 56],
        [206, 57],
        [205, 58],
        [205, 62],
        [204, 63],
        [205, 64],
        [205, 68],
        [206, 69],
        [206, 70],
        [207, 71],
        [207, 72],
        [209, 74],
        [210, 74],
        [211, 75],
        [213, 75],
        [214, 76],
        [223, 76],
        [224, 75],
        [225, 75],
        [231, 69],
        [231, 57],
        [225, 51],
        [224, 51],
        [223, 50],
        [221, 50],
        [220, 49]]},
    {'label': 6,
      'points': [[430, 51],
        [429, 52],
        [428, 52],
        [427, 53],
        [426, 53],
        [421, 58],
        [421, 59],
        [420, 60],
        [420, 69],
        [421, 70],
        [421, 71],
        [422, 72],
        [422, 73],
        [425, 76],
        [426, 76],
        [427, 77],
        [429, 77],
        [430, 78],
        [437, 78],
        [438, 77],
        [440, 77],
        [441, 76],
        [442, 76],
        [444, 74],
        [444, 73],
        [445, 72],
        [445, 71],
        [446, 70],
        [446, 59],
        [445, 58],
        [445, 57],
        [441, 53],
        [440, 53],
        [439, 52],
        [438, 52],
        [437, 51]]},
    {'label': 7,
      'points': [[187, 94],
        [186, 94],
        [184, 92],
        [183, 92],
        [176, 88],
        [174, 88],
        [173, 87],
        [168, 87],
        [167, 86],
        [165, 86],
        [164, 87],
        [159, 87],
        [158, 88],
        [156, 88],
        [155, 89],
        [150, 91],
        [143, 98],
        [143, 99],
        [139, 106],
        [139, 108],
        [138, 109],
        [138, 111],
        [137, 112],
        [137, 124],
        [138, 125],
        [138, 131],
        [139, 132],
        [139, 134],
        [140, 135],
        [140, 136],
        [139, 137],
        [138, 136],
        [135, 136],
        [134, 135],
        [128, 135],
        [127, 134],
        [114, 134],
        [113, 135],
        [108, 136],
        [107, 137],
        [100, 140],
        [94, 146],
        [93, 149],
        [91, 151],
        [91, 153],
        [90, 154],
        [90, 157],
        [89, 158],
        [89, 167],
        [90, 168],
        [90, 171],
        [92, 174],
        [92, 176],
        [93, 177],
        [93, 178],
        [101, 188],
        [102, 188],
        [106, 192],
        [107, 192],
        [109, 194],
        [110, 194],
        [111, 195],
        [113, 195],
        [118, 198],
        [121, 198],
        [122, 199],
        [129, 199],
        [130, 200],
        [147, 200],
        [148, 199],
        [161, 199],
        [162, 198],
        [190, 198],
        [191, 199],
        [195, 199],
        [196, 200],
        [201, 200],
        [202, 201],
        [204, 201],
        [204, 199],
        [203, 198],
        [203, 191],
        [202, 190],
        [202, 188],
        [201, 187],
        [201, 161],
        [202, 160],
        [202, 153],
        [203, 152],
        [203, 122],
        [202, 121],
        [202, 118],
        [201, 117],
        [201, 114],
        [200, 113],
        [196, 104],
        [193, 101],
        [193, 100]]},
    {'label': 8,
      'points': [[468, 93],
        [465, 96],
        [464, 96],
        [458, 102],
        [458, 103],
        [455, 106],
        [455, 107],
        [452, 112],
        [452, 114],
        [450, 116],
        [450, 119],
        [449, 120],
        [449, 122],
        [448, 123],
        [448, 130],
        [447, 131],
        [447, 143],
        [448, 144],
        [448, 157],
        [449, 158],
        [449, 168],
        [450, 169],
        [450, 181],
        [449, 182],
        [449, 191],
        [448, 192],
        [448, 196],
        [447, 197],
        [447, 203],
        [449, 203],
        [450, 202],
        [455, 202],
        [456, 201],
        [461, 201],
        [462, 200],
        [486, 200],
        [487, 201],
        [500, 201],
        [501, 202],
        [523, 202],
        [524, 201],
        [530, 201],
        [531, 200],
        [536, 199],
        [538, 197],
        [540, 197],
        [542, 195],
        [545, 194],
        [555, 184],
        [555, 183],
        [557, 181],
        [557, 180],
        [559, 177],
        [559, 175],
        [560, 174],
        [560, 172],
        [561, 171],
        [561, 158],
        [560, 157],
        [560, 155],
        [559, 154],
        [557, 149],
        [550, 142],
        [549, 142],
        [547, 140],
        [545, 140],
        [540, 137],
        [537, 137],
        [536, 136],
        [524, 136],
        [523, 137],
        [517, 137],
        [516, 138],
        [513, 138],
        [512, 139],
        [511, 138],
        [511, 137],
        [512, 136],
        [512, 130],
        [513, 129],
        [513, 125],
        [514, 124],
        [514, 114],
        [513, 113],
        [513, 110],
        [512, 109],
        [512, 107],
        [511, 106],
        [509, 101],
        [507, 99],
        [507, 98],
        [502, 93],
        [501, 93],
        [494, 89],
        [491, 89],
        [490, 88],
        [482, 88],
        [481, 89],
        [477, 89],
        [476, 90],
        [474, 90],
        [473, 91]]},
    {'label': 9,
      'points': [[264, 156],
        [263, 157],
        [261, 157],
        [260, 158],
        [258, 158],
        [257, 159],
        [256, 159],
        [249, 166],
        [249, 168],
        [248, 169],
        [248, 172],
        [247, 173],
        [247, 177],
        [248, 178],
        [248, 182],
        [249, 183],
        [249, 184],
        [250, 185],
        [250, 186],
        [255, 191],
        [256, 191],
        [257, 192],
        [258, 192],
        [259, 193],
        [273, 193],
        [274, 192],
        [275, 192],
        [276, 191],
        [277, 191],
        [282, 186],
        [282, 185],
        [283, 184],
        [283, 182],
        [284, 181],
        [284, 169],
        [283, 168],
        [283, 167],
        [282, 166],
        [282, 165],
        [280, 163],
        [280, 162],
        [278, 160],
        [277, 160],
        [276, 159],
        [275, 159],
        [274, 158],
        [272, 158],
        [271, 157],
        [269, 157],
        [268, 156]]},
    {'label': 10,
      'points': [[378, 161],
        [376, 163],
        [375, 163],
        [370, 168],
        [370, 169],
        [369, 170],
        [369, 172],
        [368, 173],
        [368, 184],
        [369, 185],
        [369, 187],
        [371, 189],
        [371, 190],
        [375, 194],
        [376, 194],
        [377, 195],
        [378, 195],
        [379, 196],
        [380, 196],
        [381, 197],
        [392, 197],
        [393, 196],
        [394, 196],
        [395, 195],
        [396, 195],
        [398, 193],
        [399, 193],
        [401, 191],
        [401, 190],
        [403, 188],
        [403, 186],
        [404, 185],
        [404, 184],
        [405, 183],
        [405, 174],
        [404, 173],
        [404, 171],
        [403, 170],
        [403, 169],
        [396, 162],
        [395, 162],
        [394, 161],
        [392, 161],
        [391, 160],
        [382, 160],
        [381, 161]]},
    {'label': 11,
      'points': [[59, 201],
        [58, 202],
        [57, 202],
        [53, 206],
        [53, 207],
        [52, 208],
        [52, 210],
        [51, 211],
        [51, 218],
        [52, 219],
        [52, 220],
        [53, 221],
        [53, 222],
        [56, 225],
        [57, 225],
        [58, 226],
        [59, 226],
        [60, 227],
        [70, 227],
        [71, 226],
        [72, 226],
        [77, 221],
        [77, 219],
        [78, 218],
        [78, 210],
        [77, 209],
        [77, 207],
        [72, 202],
        [71, 202],
        [70, 201],
        [67, 201],
        [66, 200],
        [64, 200],
        [63, 201]]},
    {'label': 12,
      'points': [[323, 204],
        [322, 205],
        [321, 205],
        [320, 206],
        [320, 207],
        [317, 210],
        [317, 212],
        [315, 214],
        [315, 215],
        [314, 216],
        [314, 217],
        [313, 218],
        [313, 219],
        [312, 220],
        [312, 221],
        [311, 222],
        [311, 223],
        [310, 224],
        [310, 226],
        [309, 227],
        [309, 228],
        [308, 229],
        [308, 232],
        [307, 233],
        [307, 234],
        [306, 235],
        [306, 239],
        [305, 240],
        [305, 243],
        [304, 244],
        [304, 263],
        [303, 264],
        [303, 265],
        [302, 266],
        [303, 267],
        [303, 268],
        [304, 269],
        [304, 271],
        [305, 272],
        [305, 273],
        [306, 274],
        [306, 277],
        [307, 278],
        [307, 280],
        [308, 281],
        [308, 284],
        [309, 285],
        [309, 287],
        [310, 288],
        [310, 289],
        [311, 290],
        [311, 292],
        [313, 294],
        [313, 296],
        [315, 298],
        [315, 300],
        [317, 302],
        [317, 303],
        [319, 305],
        [319, 308],
        [320, 309],
        [320, 312],
        [330, 312],
        [330, 311],
        [331, 310],
        [331, 308],
        [332, 307],
        [332, 303],
        [333, 302],
        [333, 300],
        [334, 299],
        [334, 296],
        [335, 295],
        [335, 293],
        [336, 292],
        [336, 290],
        [337, 289],
        [337, 288],
        [338, 287],
        [338, 286],
        [339, 285],
        [339, 284],
        [340, 283],
        [340, 282],
        [341, 281],
        [341, 280],
        [343, 278],
        [343, 276],
        [344, 275],
        [344, 273],
        [345, 272],
        [345, 271],
        [346, 270],
        [346, 267],
        [347, 266],
        [347, 265],
        [346, 264],
        [346, 257],
        [345, 256],
        [345, 239],
        [344, 238],
        [344, 236],
        [343, 235],
        [343, 232],
        [342, 231],
        [342, 229],
        [341, 228],
        [341, 226],
        [340, 225],
        [340, 224],
        [339, 223],
        [339, 221],
        [338, 220],
        [338, 219],
        [337, 218],
        [337, 217],
        [335, 215],
        [335, 214],
        [333, 212],
        [333, 211],
        [331, 209],
        [331, 208],
        [328, 205],
        [327, 205],
        [326, 204]]},
    {'label': 13,
      'points': [[579, 205],
        [578, 206],
        [577, 206],
        [573, 210],
        [573, 211],
        [572, 212],
        [572, 214],
        [571, 215],
        [571, 216],
        [570, 217],
        [570, 219],
        [571, 220],
        [571, 222],
        [572, 223],
        [572, 225],
        [577, 230],
        [578, 230],
        [579, 231],
        [590, 231],
        [592, 229],
        [593, 229],
        [596, 226],
        [596, 225],
        [597, 224],
        [597, 222],
        [598, 221],
        [598, 215],
        [597, 214],
        [597, 213],
        [596, 212],
        [596, 210],
        [592, 206],
        [590, 206],
        [589, 205],
        [585, 205],
        [584, 204],
        [583, 205]]},
    {'label': 14,
      'points': [[238, 238],
        [238, 244],
        [239, 245],
        [239, 248],
        [240, 249],
        [240, 253],
        [241, 254],
        [241, 256],
        [242, 257],
        [242, 259],
        [243, 260],
        [243, 261],
        [244, 262],
        [244, 265],
        [246, 267],
        [246, 269],
        [247, 270],
        [247, 271],
        [249, 273],
        [249, 274],
        [250, 275],
        [250, 276],
        [251, 277],
        [251, 278],
        [253, 280],
        [253, 281],
        [257, 285],
        [257, 286],
        [265, 294],
        [265, 296],
        [266, 297],
        [266, 298],
        [267, 299],
        [268, 299],
        [269, 300],
        [270, 300],
        [271, 301],
        [274, 301],
        [275, 302],
        [277, 302],
        [278, 303],
        [280, 303],
        [281, 304],
        [284, 304],
        [285, 305],
        [286, 305],
        [287, 306],
        [290, 306],
        [291, 307],
        [292, 307],
        [293, 308],
        [295, 308],
        [296, 309],
        [297, 309],
        [298, 310],
        [299, 310],
        [300, 311],
        [301, 311],
        [302, 312],
        [303, 312],
        [305, 314],
        [307, 314],
        [308, 315],
        [310, 315],
        [311, 316],
        [314, 316],
        [315, 315],
        [317, 315],
        [318, 314],
        [318, 309],
        [317, 308],
        [317, 305],
        [315, 303],
        [315, 302],
        [313, 300],
        [313, 298],
        [311, 296],
        [311, 295],
        [310, 294],
        [310, 293],
        [309, 292],
        [309, 290],
        [307, 288],
        [307, 285],
        [306, 284],
        [306, 282],
        [305, 281],
        [305, 278],
        [304, 277],
        [304, 274],
        [302, 272],
        [302, 269],
        [300, 267],
        [300, 266],
        [299, 266],
        [298, 265],
        [296, 265],
        [293, 262],
        [293, 261],
        [288, 256],
        [287, 256],
        [284, 253],
        [283, 253],
        [280, 250],
        [279, 250],
        [278, 249],
        [277, 249],
        [275, 247],
        [274, 247],
        [273, 246],
        [272, 246],
        [271, 245],
        [270, 245],
        [269, 244],
        [268, 244],
        [267, 243],
        [266, 243],
        [265, 242],
        [263, 242],
        [262, 241],
        [260, 241],
        [259, 240],
        [256, 240],
        [255, 239],
        [252, 239],
        [251, 238],
        [246, 238],
        [245, 237],
        [239, 237]]},
    {'label': 15,
      'points': [[410, 237],
        [407, 237],
        [406, 238],
        [401, 238],
        [400, 239],
        [398, 239],
        [397, 240],
        [393, 240],
        [392, 241],
        [391, 241],
        [390, 242],
        [387, 242],
        [386, 243],
        [385, 243],
        [384, 244],
        [383, 244],
        [382, 245],
        [380, 245],
        [379, 246],
        [378, 246],
        [377, 247],
        [376, 247],
        [374, 249],
        [373, 249],
        [372, 250],
        [371, 250],
        [369, 252],
        [368, 252],
        [367, 253],
        [366, 253],
        [355, 264],
        [353, 264],
        [352, 265],
        [350, 265],
        [348, 267],
        [348, 270],
        [347, 271],
        [347, 273],
        [346, 274],
        [346, 276],
        [345, 277],
        [345, 278],
        [343, 280],
        [343, 282],
        [341, 284],
        [341, 285],
        [340, 286],
        [340, 287],
        [339, 288],
        [339, 290],
        [338, 291],
        [338, 293],
        [337, 294],
        [337, 295],
        [336, 296],
        [336, 300],
        [335, 301],
        [335, 302],
        [334, 303],
        [334, 307],
        [333, 308],
        [333, 310],
        [332, 311],
        [332, 313],
        [333, 314],
        [333, 316],
        [335, 318],
        [336, 318],
        [337, 317],
        [339, 317],
        [340, 316],
        [343, 316],
        [344, 315],
        [345, 315],
        [347, 313],
        [349, 313],
        [351, 311],
        [352, 311],
        [353, 310],
        [354, 310],
        [355, 309],
        [357, 309],
        [358, 308],
        [359, 308],
        [360, 307],
        [361, 307],
        [362, 306],
        [365, 306],
        [366, 305],
        [367, 305],
        [368, 304],
        [372, 304],
        [373, 303],
        [374, 303],
        [375, 302],
        [376, 302],
        [377, 301],
        [380, 301],
        [381, 300],
        [382, 300],
        [383, 299],
        [383, 297],
        [384, 296],
        [384, 295],
        [394, 285],
        [394, 284],
        [396, 282],
        [396, 281],
        [399, 278],
        [399, 277],
        [400, 276],
        [400, 275],
        [402, 273],
        [402, 272],
        [403, 271],
        [403, 270],
        [404, 269],
        [404, 268],
        [405, 267],
        [405, 265],
        [407, 263],
        [407, 260],
        [408, 259],
        [408, 257],
        [409, 256],
        [409, 252],
        [410, 251],
        [410, 248],
        [411, 247],
        [411, 238]]},
    {'label': 16,
      'points': [[172, 240],
        [171, 241],
        [170, 241],
        [169, 242],
        [168, 242],
        [163, 247],
        [163, 248],
        [161, 250],
        [161, 252],
        [160, 253],
        [160, 263],
        [161, 264],
        [161, 265],
        [162, 266],
        [162, 267],
        [163, 268],
        [163, 269],
        [164, 270],
        [164, 271],
        [165, 271],
        [168, 274],
        [169, 274],
        [171, 276],
        [186, 276],
        [188, 274],
        [189, 274],
        [195, 268],
        [195, 267],
        [196, 266],
        [196, 264],
        [197, 263],
        [197, 253],
        [196, 252],
        [196, 250],
        [195, 249],
        [195, 248],
        [189, 242],
        [188, 242],
        [187, 241],
        [186, 241],
        [185, 240],
        [182, 240],
        [181, 239],
        [176, 239],
        [175, 240]]},
    {'label': 17,
      'points': [[463, 248],
        [462, 249],
        [461, 249],
        [460, 250],
        [459, 250],
        [457, 252],
        [456, 252],
        [456, 253],
        [452, 257],
        [452, 260],
        [451, 261],
        [451, 262],
        [450, 263],
        [450, 269],
        [451, 270],
        [451, 271],
        [452, 272],
        [452, 274],
        [453, 275],
        [453, 276],
        [454, 277],
        [454, 278],
        [457, 281],
        [458, 281],
        [459, 282],
        [460, 282],
        [461, 283],
        [462, 283],
        [463, 284],
        [475, 284],
        [476, 283],
        [478, 283],
        [480, 281],
        [481, 281],
        [485, 277],
        [485, 276],
        [486, 275],
        [486, 273],
        [487, 272],
        [487, 259],
        [486, 258],
        [486, 257],
        [485, 256],
        [485, 255],
        [480, 250],
        [479, 250],
        [478, 249],
        [476, 249],
        [475, 248],
        [472, 248],
        [471, 247],
        [467, 247],
        [466, 248]]},
    {'label': 18,
      'points': [[68, 258],
        [67, 259],
        [61, 259],
        [60, 260],
        [58, 260],
        [57, 261],
        [56, 261],
        [55, 262],
        [53, 262],
        [49, 265],
        [48, 265],
        [42, 271],
        [42, 272],
        [40, 274],
        [40, 275],
        [38, 278],
        [37, 283],
        [36, 284],
        [36, 290],
        [37, 291],
        [37, 294],
        [38, 295],
        [38, 297],
        [40, 300],
        [40, 302],
        [42, 304],
        [43, 307],
        [50, 314],
        [51, 314],
        [55, 317],
        [56, 317],
        [57, 318],
        [58, 321],
        [62, 321],
        [63, 322],
        [62, 323],
        [58, 323],
        [58, 324],
        [56, 327],
        [55, 327],
        [51, 330],
        [50, 330],
        [43, 337],
        [43, 338],
        [41, 340],
        [41, 341],
        [38, 346],
        [38, 348],
        [37, 349],
        [37, 351],
        [36, 352],
        [36, 361],
        [37, 362],
        [37, 365],
        [38, 366],
        [40, 371],
        [44, 375],
        [44, 376],
        [49, 380],
        [50, 380],
        [55, 383],
        [57, 383],
        [58, 384],
        [63, 384],
        [64, 385],
        [75, 385],
        [76, 384],
        [81, 384],
        [82, 383],
        [84, 383],
        [87, 381],
        [89, 381],
        [90, 380],
        [93, 379],
        [95, 377],
        [96, 377],
        [100, 373],
        [101, 373],
        [118, 355],
        [118, 354],
        [121, 351],
        [121, 350],
        [141, 330],
        [142, 330],
        [147, 326],
        [150, 325],
        [150, 324],
        [151, 323],
        [151, 320],
        [147, 317],
        [144, 316],
        [140, 312],
        [139, 312],
        [127, 300],
        [127, 299],
        [119, 291],
        [119, 290],
        [107, 277],
        [107, 276],
        [105, 274],
        [104, 274],
        [98, 268],
        [97, 268],
        [95, 266],
        [94, 266],
        [85, 261],
        [82, 261],
        [79, 259],
        [73, 259],
        [72, 258]]},
    {'label': 19,
      'points': [[574, 261],
        [573, 262],
        [571, 262],
        [570, 263],
        [567, 263],
        [566, 264],
        [564, 264],
        [561, 266],
        [559, 266],
        [557, 268],
        [555, 268],
        [551, 272],
        [550, 272],
        [547, 275],
        [546, 275],
        [536, 286],
        [536, 287],
        [529, 294],
        [529, 295],
        [525, 299],
        [525, 300],
        [509, 316],
        [508, 316],
        [503, 320],
        [500, 321],
        [497, 324],
        [497, 325],
        [499, 328],
        [504, 330],
        [508, 334],
        [509, 334],
        [516, 341],
        [517, 341],
        [519, 343],
        [519, 344],
        [524, 349],
        [524, 350],
        [531, 357],
        [531, 358],
        [534, 361],
        [534, 362],
        [550, 378],
        [553, 379],
        [556, 382],
        [557, 382],
        [560, 384],
        [562, 384],
        [565, 386],
        [569, 386],
        [570, 387],
        [574, 387],
        [575, 388],
        [584, 388],
        [585, 387],
        [589, 387],
        [590, 386],
        [593, 386],
        [594, 385],
        [599, 383],
        [607, 376],
        [607, 375],
        [609, 373],
        [609, 372],
        [611, 369],
        [611, 365],
        [612, 364],
        [612, 355],
        [611, 354],
        [611, 350],
        [609, 347],
        [609, 345],
        [608, 344],
        [608, 343],
        [606, 341],
        [606, 340],
        [598, 332],
        [595, 331],
        [591, 327],
        [591, 326],
        [588, 326],
        [587, 325],
        [588, 324],
        [590, 324],
        [591, 323],
        [591, 322],
        [594, 319],
        [596, 319],
        [600, 315],
        [601, 315],
        [606, 310],
        [606, 309],
        [608, 307],
        [608, 306],
        [609, 305],
        [609, 303],
        [611, 301],
        [611, 297],
        [612, 296],
        [612, 283],
        [611, 282],
        [611, 280],
        [610, 279],
        [609, 276],
        [606, 273],
        [606, 272],
        [599, 266],
        [597, 266],
        [595, 264],
        [593, 264],
        [592, 263],
        [590, 263],
        [589, 262],
        [587, 262],
        [586, 261]]},
    {'label': 20,
      'points': [[312, 318],
        [311, 318],
        [310, 317],
        [308, 317],
        [307, 316],
        [305, 316],
        [303, 314],
        [302, 314],
        [301, 313],
        [300, 313],
        [299, 312],
        [297, 312],
        [295, 310],
        [293, 310],
        [292, 309],
        [290, 309],
        [289, 308],
        [287, 308],
        [286, 307],
        [284, 307],
        [283, 306],
        [281, 306],
        [280, 305],
        [277, 305],
        [276, 304],
        [275, 304],
        [274, 303],
        [270, 303],
        [268, 301],
        [266, 301],
        [265, 302],
        [247, 302],
        [246, 303],
        [242, 303],
        [241, 304],
        [237, 304],
        [236, 305],
        [234, 305],
        [233, 306],
        [231, 306],
        [230, 307],
        [228, 307],
        [227, 308],
        [225, 308],
        [224, 309],
        [223, 309],
        [222, 310],
        [221, 310],
        [220, 311],
        [219, 311],
        [218, 312],
        [217, 312],
        [216, 313],
        [215, 313],
        [213, 315],
        [212, 315],
        [210, 317],
        [209, 317],
        [204, 322],
        [204, 325],
        [205, 326],
        [205, 327],
        [206, 328],
        [207, 328],
        [209, 330],
        [210, 330],
        [212, 332],
        [213, 332],
        [214, 333],
        [215, 333],
        [216, 334],
        [217, 334],
        [218, 335],
        [219, 335],
        [220, 336],
        [221, 336],
        [222, 337],
        [223, 337],
        [224, 338],
        [226, 338],
        [227, 339],
        [228, 339],
        [229, 340],
        [231, 340],
        [232, 341],
        [235, 341],
        [236, 342],
        [238, 342],
        [239, 343],
        [244, 343],
        [245, 344],
        [264, 344],
        [266, 346],
        [267, 346],
        [269, 344],
        [271, 344],
        [272, 343],
        [275, 343],
        [276, 342],
        [278, 342],
        [279, 341],
        [282, 341],
        [283, 340],
        [285, 340],
        [286, 339],
        [288, 339],
        [289, 338],
        [291, 338],
        [292, 337],
        [293, 337],
        [294, 336],
        [295, 336],
        [296, 335],
        [297, 335],
        [298, 334],
        [299, 334],
        [300, 333],
        [301, 333],
        [303, 331],
        [304, 331],
        [305, 330],
        [307, 330],
        [308, 329],
        [310, 329],
        [311, 328],
        [312, 328]]},
    {'label': 21,
      'points': [[336, 320],
        [336, 329],
        [337, 330],
        [340, 330],
        [341, 331],
        [342, 331],
        [343, 332],
        [348, 332],
        [349, 333],
        [351, 333],
        [352, 334],
        [355, 334],
        [357, 336],
        [359, 336],
        [360, 337],
        [362, 337],
        [363, 338],
        [364, 338],
        [365, 339],
        [366, 339],
        [368, 341],
        [369, 341],
        [370, 342],
        [371, 342],
        [372, 343],
        [374, 343],
        [375, 344],
        [376, 344],
        [377, 345],
        [379, 345],
        [380, 346],
        [382, 346],
        [383, 345],
        [404, 345],
        [405, 344],
        [409, 344],
        [410, 343],
        [414, 343],
        [415, 342],
        [417, 342],
        [418, 341],
        [420, 341],
        [421, 340],
        [423, 340],
        [424, 339],
        [426, 339],
        [428, 337],
        [429, 337],
        [430, 336],
        [431, 336],
        [432, 335],
        [433, 335],
        [434, 334],
        [435, 334],
        [437, 332],
        [438, 332],
        [440, 330],
        [441, 330],
        [444, 327],
        [444, 325],
        [445, 324],
        [445, 323],
        [444, 322],
        [444, 321],
        [442, 319],
        [441, 319],
        [439, 317],
        [438, 317],
        [437, 316],
        [436, 316],
        [434, 314],
        [433, 314],
        [432, 313],
        [431, 313],
        [430, 312],
        [428, 312],
        [426, 310],
        [425, 310],
        [424, 309],
        [422, 309],
        [421, 308],
        [419, 308],
        [418, 307],
        [416, 307],
        [415, 306],
        [412, 306],
        [411, 305],
        [409, 305],
        [408, 304],
        [402, 304],
        [401, 303],
        [384, 303],
        [383, 302],
        [381, 302],
        [380, 303],
        [377, 303],
        [376, 304],
        [375, 304],
        [374, 305],
        [373, 305],
        [372, 306],
        [369, 306],
        [368, 307],
        [366, 307],
        [365, 308],
        [363, 308],
        [362, 309],
        [360, 309],
        [359, 310],
        [358, 310],
        [357, 311],
        [355, 311],
        [354, 312],
        [353, 312],
        [352, 313],
        [351, 313],
        [349, 315],
        [347, 315],
        [344, 318],
        [340, 318],
        [339, 319],
        [337, 319]]},
    {'label': 22,
      'points': [[320, 314],
        [319, 315],
        [319, 316],
        [318, 317],
        [315, 317],
        [314, 318],
        [314, 329],
        [316, 329],
        [317, 330],
        [317, 331],
        [318, 332],
        [318, 334],
        [328, 334],
        [332, 330],
        [333, 330],
        [334, 329],
        [334, 319],
        [333, 318],
        [332, 318],
        [331, 317],
        [331, 314]]},
    {'label': 23,
      'points': [[315, 331],
        [314, 331],
        [313, 330],
        [311, 330],
        [310, 331],
        [308, 331],
        [307, 332],
        [305, 332],
        [304, 333],
        [303, 333],
        [301, 335],
        [300, 335],
        [299, 336],
        [298, 336],
        [296, 338],
        [294, 338],
        [293, 339],
        [292, 339],
        [291, 340],
        [289, 340],
        [288, 341],
        [286, 341],
        [285, 342],
        [284, 342],
        [283, 343],
        [279, 343],
        [278, 344],
        [276, 344],
        [275, 345],
        [272, 345],
        [271, 346],
        [270, 346],
        [269, 347],
        [268, 347],
        [267, 348],
        [266, 348],
        [266, 350],
        [265, 351],
        [265, 353],
        [263, 355],
        [262, 355],
        [257, 360],
        [257, 361],
        [254, 364],
        [254, 365],
        [251, 368],
        [251, 369],
        [249, 371],
        [249, 372],
        [248, 373],
        [248, 374],
        [246, 376],
        [246, 378],
        [245, 379],
        [245, 380],
        [244, 381],
        [244, 382],
        [243, 383],
        [243, 384],
        [242, 385],
        [242, 388],
        [241, 389],
        [241, 391],
        [240, 392],
        [240, 395],
        [239, 396],
        [239, 399],
        [238, 400],
        [238, 410],
        [240, 410],
        [241, 409],
        [251, 409],
        [252, 408],
        [254, 408],
        [255, 407],
        [258, 407],
        [259, 406],
        [260, 406],
        [261, 405],
        [263, 405],
        [264, 404],
        [266, 404],
        [267, 403],
        [268, 403],
        [269, 402],
        [270, 402],
        [271, 401],
        [272, 401],
        [274, 399],
        [276, 399],
        [278, 397],
        [279, 397],
        [280, 396],
        [281, 396],
        [286, 391],
        [287, 391],
        [294, 384],
        [295, 384],
        [296, 383],
        [297, 383],
        [298, 382],
        [300, 382],
        [300, 380],
        [301, 379],
        [301, 376],
        [302, 375],
        [302, 374],
        [303, 373],
        [303, 372],
        [304, 371],
        [304, 370],
        [305, 369],
        [305, 368],
        [306, 367],
        [306, 366],
        [307, 365],
        [307, 364],
        [308, 363],
        [308, 362],
        [309, 361],
        [309, 360],
        [310, 359],
        [310, 358],
        [311, 357],
        [311, 355],
        [312, 354],
        [312, 352],
        [313, 351],
        [313, 348],
        [314, 347],
        [314, 345],
        [315, 344],
        [315, 339],
        [316, 338],
        [316, 336],
        [317, 335],
        [316, 334],
        [316, 332]]},
    {'label': 24,
      'points': [[331, 333],
        [331, 334],
        [330, 335],
        [330, 336],
        [331, 337],
        [331, 340],
        [332, 341],
        [332, 342],
        [333, 343],
        [333, 344],
        [335, 346],
        [335, 347],
        [336, 348],
        [336, 349],
        [337, 350],
        [337, 351],
        [338, 352],
        [338, 353],
        [339, 354],
        [339, 355],
        [340, 356],
        [340, 357],
        [341, 358],
        [341, 360],
        [342, 361],
        [342, 362],
        [343, 363],
        [343, 366],
        [344, 367],
        [344, 369],
        [345, 370],
        [345, 373],
        [346, 374],
        [346, 376],
        [347, 377],
        [347, 379],
        [348, 380],
        [348, 381],
        [349, 382],
        [351, 382],
        [352, 383],
        [353, 383],
        [364, 394],
        [365, 394],
        [366, 395],
        [367, 395],
        [371, 399],
        [373, 399],
        [375, 401],
        [376, 401],
        [377, 402],
        [378, 402],
        [379, 403],
        [380, 403],
        [381, 404],
        [382, 404],
        [383, 405],
        [384, 405],
        [385, 406],
        [387, 406],
        [388, 407],
        [391, 407],
        [392, 408],
        [394, 408],
        [395, 409],
        [400, 409],
        [401, 410],
        [410, 410],
        [410, 400],
        [409, 399],
        [409, 395],
        [408, 394],
        [408, 392],
        [407, 391],
        [407, 388],
        [406, 387],
        [406, 386],
        [405, 385],
        [405, 383],
        [403, 381],
        [403, 379],
        [402, 378],
        [402, 377],
        [401, 376],
        [401, 375],
        [400, 374],
        [400, 373],
        [399, 372],
        [399, 371],
        [396, 368],
        [396, 367],
        [395, 366],
        [395, 365],
        [383, 353],
        [383, 352],
        [382, 351],
        [382, 349],
        [381, 348],
        [380, 348],
        [379, 347],
        [377, 347],
        [376, 346],
        [375, 346],
        [374, 345],
        [372, 345],
        [371, 344],
        [370, 344],
        [369, 343],
        [368, 343],
        [367, 342],
        [366, 342],
        [365, 341],
        [364, 341],
        [362, 339],
        [360, 339],
        [359, 338],
        [357, 338],
        [356, 337],
        [355, 337],
        [354, 336],
        [351, 336],
        [350, 335],
        [348, 335],
        [347, 334],
        [343, 334],
        [342, 333],
        [341, 333],
        [340, 332],
        [337, 332],
        [336, 331],
        [335, 331],
        [334, 332],
        [332, 332]]},
    {'label': 25,
      'points': [[318, 336],
        [318, 338],
        [317, 339],
        [317, 344],
        [316, 345],
        [316, 348],
        [315, 349],
        [315, 352],
        [314, 353],
        [314, 354],
        [313, 355],
        [313, 357],
        [312, 358],
        [312, 360],
        [311, 361],
        [311, 362],
        [309, 364],
        [309, 365],
        [308, 366],
        [308, 367],
        [307, 368],
        [307, 369],
        [306, 370],
        [306, 371],
        [305, 372],
        [305, 373],
        [304, 374],
        [304, 376],
        [303, 377],
        [303, 379],
        [302, 380],
        [302, 383],
        [303, 384],
        [303, 401],
        [304, 402],
        [304, 408],
        [305, 409],
        [305, 411],
        [306, 412],
        [306, 416],
        [307, 417],
        [307, 418],
        [308, 419],
        [308, 421],
        [309, 422],
        [309, 424],
        [310, 425],
        [310, 426],
        [311, 427],
        [311, 428],
        [312, 429],
        [312, 430],
        [313, 431],
        [313, 432],
        [314, 433],
        [314, 434],
        [317, 437],
        [317, 438],
        [319, 440],
        [319, 441],
        [321, 443],
        [323, 443],
        [324, 444],
        [325, 444],
        [326, 443],
        [327, 443],
        [330, 440],
        [330, 439],
        [332, 437],
        [332, 436],
        [334, 434],
        [334, 433],
        [335, 432],
        [335, 431],
        [336, 430],
        [336, 429],
        [337, 428],
        [337, 427],
        [338, 426],
        [338, 425],
        [339, 424],
        [339, 422],
        [340, 421],
        [340, 419],
        [341, 418],
        [341, 416],
        [342, 415],
        [342, 413],
        [343, 412],
        [343, 408],
        [344, 407],
        [344, 403],
        [345, 402],
        [345, 383],
        [346, 382],
        [346, 381],
        [345, 380],
        [345, 377],
        [344, 376],
        [344, 374],
        [343, 373],
        [343, 370],
        [342, 369],
        [342, 368],
        [341, 367],
        [341, 364],
        [340, 363],
        [340, 362],
        [339, 361],
        [339, 359],
        [338, 358],
        [338, 356],
        [337, 355],
        [337, 354],
        [336, 353],
        [336, 352],
        [335, 351],
        [335, 350],
        [334, 349],
        [334, 348],
        [333, 347],
        [333, 346],
        [331, 344],
        [331, 343],
        [330, 342],
        [330, 341],
        [329, 340],
        [329, 337],
        [328, 336]]},
    {'label': 26,
      'points': [[175, 359],
        [174, 360],
        [170, 360],
        [169, 361],
        [168, 361],
        [167, 362],
        [165, 362],
        [159, 368],
        [159, 369],
        [158, 370],
        [158, 372],
        [157, 373],
        [157, 375],
        [156, 376],
        [156, 381],
        [157, 382],
        [157, 384],
        [158, 385],
        [158, 386],
        [159, 387],
        [159, 388],
        [160, 389],
        [160, 390],
        [164, 394],
        [165, 394],
        [166, 395],
        [167, 395],
        [168, 396],
        [170, 396],
        [171, 397],
        [180, 397],
        [181, 396],
        [183, 396],
        [184, 395],
        [185, 395],
        [188, 392],
        [189, 392],
        [189, 391],
        [192, 388],
        [192, 387],
        [193, 386],
        [193, 371],
        [191, 369],
        [191, 367],
        [186, 362],
        [184, 362],
        [183, 361],
        [182, 361],
        [181, 360],
        [176, 360]]},
    {'label': 27,
      'points': [[648, 364],
        [646, 365],
        [643, 388],
        [634, 423],
        [617, 465],
        [607, 484],
        [589, 512],
        [558, 549],
        [535, 571],
        [516, 586],
        [477, 611],
        [450, 624],
        [417, 636],
        [388, 643],
        [365, 646],
        [364, 648],
        [649, 649]]},
    {'label': 28,
      'points': [[1, 365],
        [0, 649],
        [285, 648],
        [284, 646],
        [261, 643],
        [226, 634],
        [188, 619],
        [144, 594],
        [114, 571],
        [100, 558],
        [69, 524],
        [51, 499],
        [38, 477],
        [25, 450],
        [15, 423],
        [6, 388],
        [3, 366]]},
    {'label': 29,
      'points': [[461, 368],
        [460, 369],
        [458, 369],
        [457, 370],
        [456, 370],
        [455, 371],
        [454, 371],
        [450, 375],
        [450, 377],
        [448, 379],
        [448, 382],
        [447, 383],
        [447, 390],
        [448, 391],
        [448, 394],
        [450, 396],
        [450, 397],
        [456, 403],
        [458, 403],
        [459, 404],
        [460, 404],
        [461, 405],
        [470, 405],
        [471, 404],
        [473, 404],
        [474, 403],
        [475, 403],
        [476, 402],
        [477, 402],
        [482, 397],
        [482, 396],
        [483, 395],
        [483, 394],
        [484, 393],
        [484, 380],
        [483, 379],
        [483, 378],
        [482, 377],
        [482, 376],
        [479, 373],
        [479, 372],
        [478, 372],
        [476, 370],
        [475, 370],
        [474, 369],
        [472, 369],
        [471, 368]]},
    {'label': 30,
      'points': [[58, 416],
        [57, 417],
        [56, 417],
        [51, 422],
        [51, 424],
        [50, 425],
        [50, 426],
        [49, 427],
        [49, 431],
        [50, 432],
        [50, 434],
        [51, 435],
        [51, 437],
        [55, 441],
        [57, 441],
        [58, 442],
        [68, 442],
        [69, 441],
        [71, 441],
        [74, 438],
        [74, 437],
        [75, 436],
        [75, 435],
        [76, 434],
        [76, 425],
        [75, 424],
        [75, 422],
        [70, 417],
        [69, 417],
        [68, 416],
        [65, 416],
        [64, 415],
        [62, 415],
        [61, 416]]},
    {'label': 31,
      'points': [[574, 422],
        [571, 425],
        [571, 426],
        [570, 427],
        [570, 430],
        [569, 431],
        [569, 436],
        [570, 437],
        [570, 439],
        [571, 440],
        [571, 441],
        [572, 442],
        [572, 443],
        [573, 444],
        [574, 444],
        [575, 445],
        [576, 445],
        [577, 446],
        [589, 446],
        [595, 440],
        [595, 438],
        [596, 437],
        [596, 429],
        [595, 428],
        [595, 427],
        [593, 425],
        [593, 424],
        [592, 423],
        [591, 423],
        [589, 421],
        [588, 421],
        [587, 420],
        [578, 420],
        [577, 421],
        [576, 421],
        [575, 422]]},
    {'label': 32,
      'points': [[105, 452],
        [102, 455],
        [101, 455],
        [93, 464],
        [93, 465],
        [90, 470],
        [89, 475],
        [88, 476],
        [88, 479],
        [87, 480],
        [87, 484],
        [88, 485],
        [88, 488],
        [89, 489],
        [89, 491],
        [90, 492],
        [90, 495],
        [92, 497],
        [92, 498],
        [98, 504],
        [99, 504],
        [101, 506],
        [102, 506],
        [105, 508],
        [107, 508],
        [110, 510],
        [128, 510],
        [129, 509],
        [136, 509],
        [137, 510],
        [137, 512],
        [136, 513],
        [136, 520],
        [135, 521],
        [135, 533],
        [136, 534],
        [136, 537],
        [137, 538],
        [137, 540],
        [138, 541],
        [140, 546],
        [149, 555],
        [150, 555],
        [153, 557],
        [156, 557],
        [157, 558],
        [171, 558],
        [172, 557],
        [174, 557],
        [175, 556],
        [182, 553],
        [186, 549],
        [187, 549],
        [189, 547],
        [189, 546],
        [193, 542],
        [194, 539],
        [196, 537],
        [196, 536],
        [197, 535],
        [197, 533],
        [199, 530],
        [199, 527],
        [200, 526],
        [200, 523],
        [201, 522],
        [201, 496],
        [200, 495],
        [200, 489],
        [199, 488],
        [199, 458],
        [200, 457],
        [200, 455],
        [201, 454],
        [201, 446],
        [202, 445],
        [202, 444],
        [197, 444],
        [196, 445],
        [191, 445],
        [190, 446],
        [160, 446],
        [159, 445],
        [152, 445],
        [151, 444],
        [128, 444],
        [127, 445],
        [121, 445],
        [118, 447],
        [115, 447],
        [114, 448]]},
    {'label': 33,
      'points': [[445, 446],
        [445, 451],
        [446, 452],
        [446, 458],
        [447, 459],
        [447, 488],
        [446, 489],
        [446, 500],
        [445, 501],
        [445, 520],
        [446, 521],
        [446, 527],
        [448, 530],
        [448, 533],
        [450, 535],
        [450, 537],
        [451, 538],
        [452, 541],
        [454, 543],
        [454, 544],
        [465, 555],
        [467, 555],
        [469, 557],
        [471, 557],
        [474, 559],
        [494, 559],
        [496, 557],
        [497, 557],
        [499, 555],
        [500, 555],
        [505, 550],
        [505, 549],
        [507, 547],
        [507, 546],
        [510, 541],
        [510, 538],
        [511, 537],
        [511, 520],
        [510, 519],
        [510, 512],
        [509, 511],
        [510, 510],
        [511, 510],
        [512, 511],
        [517, 511],
        [518, 512],
        [538, 512],
        [541, 510],
        [543, 510],
        [544, 509],
        [547, 508],
        [550, 505],
        [551, 505],
        [554, 502],
        [554, 501],
        [556, 499],
        [556, 498],
        [559, 493],
        [559, 476],
        [557, 473],
        [557, 471],
        [555, 469],
        [555, 467],
        [552, 464],
        [552, 463],
        [546, 457],
        [545, 457],
        [542, 454],
        [541, 454],
        [534, 450],
        [532, 450],
        [529, 448],
        [526, 448],
        [525, 447],
        [522, 447],
        [521, 446],
        [499, 446],
        [498, 447],
        [491, 447],
        [490, 448],
        [456, 448],
        [455, 447],
        [453, 447],
        [452, 446]]},
    {'label': 34,
      'points': [[251, 448],
        [250, 449],
        [249, 449],
        [248, 450],
        [247, 450],
        [243, 454],
        [243, 455],
        [241, 457],
        [241, 459],
        [240, 460],
        [240, 462],
        [239, 463],
        [239, 468],
        [240, 469],
        [240, 472],
        [241, 473],
        [241, 474],
        [242, 475],
        [242, 476],
        [244, 478],
        [244, 479],
        [245, 480],
        [246, 480],
        [248, 482],
        [249, 482],
        [250, 483],
        [251, 483],
        [252, 484],
        [264, 484],
        [265, 483],
        [267, 483],
        [270, 480],
        [271, 480],
        [273, 478],
        [273, 477],
        [275, 475],
        [275, 474],
        [276, 473],
        [276, 459],
        [275, 458],
        [275, 457],
        [274, 456],
        [274, 455],
        [269, 450],
        [268, 450],
        [267, 449],
        [266, 449],
        [265, 448],
        [262, 448],
        [261, 447],
        [255, 447],
        [254, 448]]},
    {'label': 35,
      'points': [[376, 450],
        [375, 451],
        [373, 451],
        [372, 452],
        [370, 452],
        [369, 453],
        [368, 453],
        [362, 459],
        [362, 461],
        [361, 462],
        [361, 463],
        [360, 464],
        [360, 468],
        [359, 469],
        [360, 470],
        [360, 474],
        [361, 475],
        [361, 477],
        [362, 478],
        [362, 479],
        [363, 480],
        [363, 481],
        [367, 485],
        [369, 485],
        [370, 486],
        [371, 486],
        [372, 487],
        [385, 487],
        [386, 486],
        [387, 486],
        [388, 485],
        [389, 485],
        [395, 479],
        [395, 478],
        [396, 477],
        [396, 474],
        [397, 473],
        [397, 465],
        [396, 464],
        [396, 462],
        [395, 461],
        [395, 460],
        [394, 459],
        [394, 458],
        [389, 453],
        [388, 453],
        [387, 452],
        [385, 452],
        [384, 451],
        [382, 451],
        [381, 450]]},
    {'label': 36,
      'points': [[323, 496],
        [320, 498],
        [320, 499],
        [318, 501],
        [317, 504],
        [313, 508],
        [313, 509],
        [301, 521],
        [300, 521],
        [292, 529],
        [291, 529],
        [285, 535],
        [284, 535],
        [278, 541],
        [277, 541],
        [275, 543],
        [275, 544],
        [269, 550],
        [269, 551],
        [266, 555],
        [266, 556],
        [263, 561],
        [263, 563],
        [261, 566],
        [261, 570],
        [260, 571],
        [260, 585],
        [261, 586],
        [261, 590],
        [264, 595],
        [264, 597],
        [267, 600],
        [267, 601],
        [271, 605],
        [272, 605],
        [274, 607],
        [275, 607],
        [280, 610],
        [282, 610],
        [283, 611],
        [293, 611],
        [294, 610],
        [297, 610],
        [298, 609],
        [300, 609],
        [301, 608],
        [306, 606],
        [308, 604],
        [309, 604],
        [315, 598],
        [315, 597],
        [317, 595],
        [318, 592],
        [322, 589],
        [322, 586],
        [323, 585],
        [324, 586],
        [324, 590],
        [327, 591],
        [330, 595],
        [330, 596],
        [332, 598],
        [332, 599],
        [341, 607],
        [342, 607],
        [345, 609],
        [347, 609],
        [350, 611],
        [365, 611],
        [368, 609],
        [370, 609],
        [372, 607],
        [373, 607],
        [375, 605],
        [376, 605],
        [379, 602],
        [379, 601],
        [383, 596],
        [383, 594],
        [384, 593],
        [384, 591],
        [385, 590],
        [385, 587],
        [386, 586],
        [386, 570],
        [385, 569],
        [385, 567],
        [384, 566],
        [384, 563],
        [383, 562],
        [379, 553],
        [372, 545],
        [372, 544],
        [371, 544],
        [368, 540],
        [367, 540],
        [354, 528],
        [353, 528],
        [350, 525],
        [349, 525],
        [332, 508],
        [332, 507],
        [328, 502],
        [327, 499]]},
    {'label': 37,
      'points': [[208, 570],
        [207, 571],
        [206, 571],
        [203, 574],
        [203, 575],
        [201, 577],
        [201, 580],
        [200, 581],
        [200, 584],
        [201, 585],
        [201, 588],
        [202, 589],
        [202, 590],
        [206, 594],
        [207, 594],
        [208, 595],
        [209, 595],
        [210, 596],
        [218, 596],
        [219, 595],
        [220, 595],
        [221, 594],
        [222, 594],
        [226, 590],
        [226, 589],
        [227, 588],
        [227, 577],
        [225, 575],
        [225, 574],
        [222, 571],
        [221, 571],
        [220, 570],
        [217, 570],
        [216, 569],
        [212, 569],
        [211, 570]]},
    {'label': 38,
      'points': [[428, 570],
        [427, 571],
        [425, 571],
        [424, 572],
        [422, 572],
        [418, 576],
        [418, 577],
        [417, 578],
        [417, 579],
        [416, 580],
        [416, 582],
        [415, 583],
        [415, 585],
        [416, 586],
        [416, 589],
        [417, 590],
        [417, 591],
        [419, 593],
        [419, 594],
        [420, 594],
        [422, 596],
        [423, 596],
        [424, 597],
        [425, 597],
        [426, 598],
        [432, 598],
        [433, 597],
        [435, 597],
        [436, 596],
        [437, 596],
        [441, 592],
        [441, 591],
        [442, 590],
        [442, 588],
        [443, 587],
        [443, 582],
        [442, 581],
        [442, 579],
        [441, 578],
        [441, 577],
        [440, 576],
        [440, 575],
        [438, 573],
        [437, 573],
        [436, 572],
        [434, 572],
        [433, 571],
        [431, 571],
        [430, 570]]
    }
  ];

  List<Color> colors = [
    Color(0xFFEF4444),
    Color(0xFFF97316),
    Color(0xFFFACC15),
    Color(0xFF4ADE80),
    Color(0xFF2DD4BF),
    Color(0xFF3B82F6),
    Color(0xFF6366F1),
    Color(0xFFEC4899),
    Color(0xFFF43F5E),
    Color(0xFFD946EF),
    Color(0xFF8B5CF6),
    Color(0xFF0EA5E9),
    Color(0xFF10B981),
    Color(0xFF84CC16),
  ];

  void _undo() {
    if (mode == ColoringMode.fill) {
      return;
    }
    if (selectedPolygon == null) return;
    final stack = undoStack[selectedPolygon!];
    if (stack != null && stack.isNotEmpty) {
      setState(() {
        redoStack[selectedPolygon!]!.add(List<_Stroke>.from(strokesByPolygon[selectedPolygon!]!));
        strokesByPolygon[selectedPolygon!] = List<_Stroke>.from(stack.removeLast());
      });
    }
  }

  void _redo() {
    if (mode == ColoringMode.fill) {
      return;
    }
    if (selectedPolygon == null) return;
    final stack = redoStack[selectedPolygon!];
    if (stack != null && stack.isNotEmpty) {
      setState(() {
        undoStack[selectedPolygon!]!.add(List<_Stroke>.from(strokesByPolygon[selectedPolygon!]!));
        strokesByPolygon[selectedPolygon!] = List<_Stroke>.from(stack.removeLast());
      });
    }
  }

  void _erase() {
    setState(() {
      if (mode == ColoringMode.fill) {
        if (selectedPolygon != null) {
          // Erase only the selected polygon (no groups)
          polygonColors[selectedPolygon!] = Colors.white;
        }
      } else {
        if (selectedPolygon != null) {
          undoStack[selectedPolygon!]!.add(List<_Stroke>.from(strokesByPolygon[selectedPolygon!]!));
          strokesByPolygon[selectedPolygon!]!.clear();
          redoStack[selectedPolygon!]!.clear();
        }
      }
    });
  }

  bool _isColorPickerVisible = false;

  void _zoomIn() {
    setState(() {
      zoom = (zoom * 1.2).clamp(0.5, 3.0);
    });
  }

  void _zoomOut() {
    setState(() {
      zoom = (zoom / 1.2).clamp(0.5, 3.0);
      if (zoom <= 1.0) {
        panOffset = Offset.zero;
      }
    });
  }

  // ValueChanged<Color> callback - update both pickerColor and selectedColor
  void changeColor(Color color) {
    setState(() {
      pickerColor = color;
      selectedColor = color;
    });
  }

  void _toggleMode() {
    setState(() {
      mode = mode == ColoringMode.fill ? ColoringMode.brush : ColoringMode.fill;
      selectedPolygon = null; // Clear selection when switching modes
    });
  }

  int no = 0;
  @override
  void initState() {
    super.initState();
    no = 0;
    polygonColors = {for (int i = 0; i < polygonData.length; i++) i: Colors.white};
    for (int i = 0; i < polygonData.length; i++) {
      strokesByPolygon[i] = [];
      undoStack[i] = [];
      redoStack[i] = [];
    }
    _calculateRegions();
  }

  void _calculateRegions() {
    regions = polygonData.map((regionData) {
      return RegionInfo(
        label: regionData['label'],
        points: List<List<int>>.from(regionData['points']),
      );
    }).toList();
  }

  void _updateScale(Size size) {
    double maxX = 0, maxY = 0;
    for (var region in polygonData) {
      for (var point in region['points']) {
        maxX = math.max(maxX, point[0].toDouble());
        maxY = math.max(maxY, point[1].toDouble());
      }
    }

    double scaleX = (size.width * 0.9) / maxX;
    double scaleY = (size.height * 0.9) / maxY;
    scale = math.min(scaleX, scaleY);

    offsetX = (size.width - maxX * scale) / 2;
    offsetY = (size.height - maxY * scale) / 2;

    for (var region in regions) {
      region.updatePath(scale, offsetX, offsetY);
    }
  }

  void _changeBrushWidth() {
    showDialog(
        context: context,
        builder: (ctx) {
          double tempWidth = brushWidth;
          return AlertDialog(
            title: const Text("Brush Width"),
            content: StatefulBuilder(
              builder: (context, setDialogState) {
                return Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Text("Width: ${tempWidth.toInt()}"),
                    Slider(
                      value: tempWidth,
                      min: 1,
                      max: 20,
                      divisions: 19,
                      onChanged: (val) => setDialogState(() => tempWidth = val),
                    ),
                  ],
                );
              },
            ),
            actions: [
              TextButton(
                  onPressed: () {
                    Navigator.pop(ctx);
                  },
                  child: const Text("Cancel")),
              TextButton(
                  onPressed: () {
                    setState(() {
                      brushWidth = tempWidth;
                    });
                    Navigator.pop(ctx);
                  },
                  child: const Text("Set"))
            ],
          );
        });
  }

  // ===== handlers =====
  void _handleTap(Offset localPos) {
    print('Tap at: $localPos');
    if (_isPanning) return; // Ignore tap if panning

    int? tappedIndex;

    // Check regions in reverse (last drawn = topmost)
    for (int i = regions.length - 1; i >= 0; i--) {
      if (regions[i].path.contains(localPos)) {
        tappedIndex = i;
        print('Found region (topmost): $i');
        break;
      }
    }

    if (tappedIndex == null) {
      print('No region found');
      setState(() => selectedPolygon = null);
      return;
    }

    if (mode == ColoringMode.fill) {
      // Fill only tapped polygon
      print('Filling polygon: $tappedIndex with color: $selectedColor');
      setState(() {
        selectedPolygon = tappedIndex;
        polygonColors[tappedIndex!] = selectedColor;
      });
    } else {
      // Brush mode → just select this polygon for painting
      setState(() => selectedPolygon = tappedIndex);
    }
  }


  void _panStart(Offset localPos) {
    if (mode != ColoringMode.brush || selectedPolygon == null || _isPanning) return;

    // Convert screen coordinates to canvas coordinates using scale and offset
    Offset canvasPos = Offset(
      (localPos.dx - offsetX) / scale,
      (localPos.dy - offsetY) / scale,
    );

    // only start if initial point is inside selected polygon
    if (_isPointInPolygon(canvasPos, polygonData[selectedPolygon!]['points'])) {
      // Save state for undo before adding new stroke
      undoStack[selectedPolygon!]!.add(List<_Stroke>.from(strokesByPolygon[selectedPolygon!]!));
      // Clear redo stack when new action is performed
      redoStack[selectedPolygon!]!.clear();

      strokesByPolygon[selectedPolygon!] ??= [];
      strokesByPolygon[selectedPolygon!]!.add(_Stroke(points: [canvasPos], color: selectedColor, width: brushWidth));
      _isDrawing = true;
      setState(() {});
    }
  }

  void _panUpdate(Offset localPos) {
    if (!_isDrawing || selectedPolygon == null || _isPanning) return;

    // Convert screen coordinates to canvas coordinates
    Offset canvasPos = Offset(
      (localPos.dx - offsetX) / scale,
      (localPos.dy - offsetY) / scale,
    );

    final strokes = strokesByPolygon[selectedPolygon!];
    if (strokes != null && strokes.isNotEmpty) {
      strokes.last.points.add(canvasPos);
      setState(() {});
    }
  }

  void _panEnd() {
    _isDrawing = false;
  }

  bool _isPointInPolygon(Offset point, List<dynamic> polygonPoints) {
    final verts = polygonPoints.map<Offset>((p) => Offset((p[0] as num).toDouble(), (p[1] as num).toDouble())).toList();
    int crossings = 0;
    for (int i = 0; i < verts.length; i++) {
      final a = verts[i];
      final b = verts[(i + 1) % verts.length];
      final cond = (a.dy > point.dy) != (b.dy > point.dy);
      if (cond) {
        final x = a.dx + (point.dy - a.dy) * (b.dx - a.dx) / (b.dy - a.dy);
        if (point.dx < x) crossings++;
      }
    }
    return crossings.isOdd;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: EdgeInsets.symmetric(horizontal: 30.w),
        child: SafeArea(
          child: SingleChildScrollView(
            child: ConstrainedBox(
              constraints: BoxConstraints(minHeight: MediaQuery.of(context).size.height),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Padding(
                    padding: EdgeInsets.only(top: 32.h),
                    child: no == 0
                        ? SingleChildScrollView(scrollDirection: Axis.horizontal,
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          IconButton(
                              onPressed: () {
                                Navigator.pop(context);
                              },
                              style: IconButton.styleFrom(
                                  shape: CircleBorder(side: BorderSide(color: Color.fromRGBO(204, 204, 204, 1)))),
                              icon: Icon(Icons.arrow_back)),
                          Row(
                            children: [
                              // Mode toggle button
                              IconButton(
                                  onPressed: _toggleMode,
                                  style: IconButton.styleFrom(
                                      backgroundColor: mode == ColoringMode.brush ? Colors.blue : Colors.white,
                                      shape: CircleBorder(side: BorderSide(color: Color.fromRGBO(204, 204, 204, 1)))),
                                  icon: Icon(
                                    mode == ColoringMode.fill ? Icons.format_color_fill : Icons.brush,
                                    color: mode == ColoringMode.brush ? Colors.white : Colors.black,
                                  )),
                              IconButton(
                                  onPressed: mode == ColoringMode.brush ? _changeBrushWidth : null,
                                  style: IconButton.styleFrom(
                                      shape: CircleBorder(side: BorderSide(color: Color.fromRGBO(204, 204, 204, 1)))),
                                  icon: SvgPicture.asset("assets/coloring_screen/Vector.svg",
                                      color: mode == ColoringMode.brush ? null : Colors.grey)),
                              IconButton(
                                  onPressed: _erase,
                                  style: IconButton.styleFrom(
                                      shape: CircleBorder(side: BorderSide(color: Color.fromRGBO(204, 204, 204, 1)))),
                                  icon: SvgPicture.asset("assets/coloring_screen/Vector1.svg")),
                              IconButton(
                                  onPressed: () {
                                    setState(() {
                                      no = 1;
                                    });
                                  },
                                  style: IconButton.styleFrom(
                                      shape: CircleBorder(side: BorderSide(color: Color.fromRGBO(204, 204, 204, 1)))),
                                  icon: SvgPicture.asset("assets/coloring_screen/Vector2.svg")),
                              IconButton(
                                  onPressed: _zoomIn,
                                  style: IconButton.styleFrom(
                                      shape: CircleBorder(side: BorderSide(color: Color.fromRGBO(204, 204, 204, 1)))),
                                  icon: SvgPicture.asset("assets/coloring_screen/Vector3.svg")),
                              IconButton(
                                  onPressed: _zoomOut,
                                  style: IconButton.styleFrom(
                                      shape: CircleBorder(side: BorderSide(color: Color.fromRGBO(204, 204, 204, 1)))),
                                  icon: Icon(Icons.zoom_out)),
                            ],
                          )
                        ],
                      ),
                    )
                        : Column(
                      children: [
                        Container(
                            height: 95.h,
                            width: MediaQuery.of(context).size.width,
                            color: Color(0xFF9654FE),
                            child: PlayerCard(song: SongModel(name: "Life of Hope", image: "assets/calibration/song1.png", author: "Leo Mano", ispro: false))),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.end,
                          children: [
                            InkWell(
                              onTap: () {
                                setState(() {
                                  no = 0;
                                });
                              },
                              child: Container(
                                width: 36.w,
                                height: 21.h,
                                decoration: BoxDecoration(
                                    color: Color(0xFF9654FE),
                                    borderRadius: BorderRadius.only(
                                      bottomRight: Radius.circular(8),
                                      bottomLeft: Radius.circular(8),
                                    )),
                                child: Center(child: Icon(Icons.keyboard_arrow_up_outlined, color: Colors.white)),
                              ),
                            )
                          ],
                        )
                      ],
                    ),
                  ),
                  Container(
                    width: 319.w,
                    height: 346.h,
                    margin: EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.grey),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(8),
                      child: LayoutBuilder(
                        builder: (context, constraints) {
                          Size size = Size(constraints.maxWidth, constraints.maxHeight);
                          _updateScale(size);
                          return GestureDetector(
                            onTapUp: (details) {
                              print('GestureDetector onTapUp: ${details.localPosition}');
                              _handleTap(details.localPosition);
                            },
                            onPanStart: (details) {
                              print('GestureDetector onPanStart: ${details.localPosition}');
                              _panStart(details.localPosition);
                            },
                            onPanUpdate: (details) {
                              _panUpdate(details.localPosition);
                            },
                            onPanEnd: (_) => _panEnd(),
                            child: CustomPaint(
                              size: size,
                              painter: _MandalaPainter(
                                regions: regions,
                                polygonColors: polygonColors,
                                strokesByPolygon: strokesByPolygon,
                                selectedPolygon: selectedPolygon,
                                scale: scale,
                                offsetX: offsetX,
                                offsetY: offsetY,
                              ),
                            ),
                          );
                        },
                      ),
                    ),
                  ),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      if (_isColorPickerVisible == true)
                        Padding(
                          padding: EdgeInsets.only(right: 10.w),
                          child: Container(
                            padding: EdgeInsets.all(3),
                            width: 256.w,
                            height: 135.h,
                            color: Colors.white,
                            child: Column(
                              children: [
                                Row(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: [
                                    Text(
                                      "Choose colors:",
                                      style: TextStyle(fontSize: 12.sp, fontWeight: FontWeight.w500, color: Colors.black),
                                    ),
                                    IconButton(
                                        onPressed: () {
                                          showDialog(
                                            context: context,
                                            builder: (context) {
                                              return AlertDialog(
                                                actions: [
                                                  Row(
                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                    children: [
                                                      TextButton(
                                                          onPressed: () {
                                                            Navigator.pop(context);
                                                          },
                                                          style: TextButton.styleFrom(
                                                              backgroundColor: Color(0xFFAAAAAA),
                                                              shape: RoundedRectangleBorder(
                                                                borderRadius: BorderRadius.circular(24),
                                                              )),
                                                          child: Padding(
                                                            padding: EdgeInsets.symmetric(horizontal: 15.5.w, vertical: 5.5.h),
                                                            child: Text(
                                                              "Cancel",
                                                              style: TextStyle(fontSize: 14.sp, fontWeight: FontWeight.w700, color: Colors.white),
                                                            ),
                                                          )),
                                                      TextButton(
                                                          onPressed: () {
                                                            // "Select" — commit pickerColor to selectedColor and close
                                                            setState(() {
                                                              selectedColor = pickerColor;
                                                            });
                                                            Navigator.pop(context);
                                                          },
                                                          style: TextButton.styleFrom(
                                                              backgroundColor: Color(0xFF9654FE),
                                                              shape: RoundedRectangleBorder(
                                                                borderRadius: BorderRadius.circular(24),
                                                              )),
                                                          child: Padding(
                                                            padding: EdgeInsets.symmetric(horizontal: 15.5.w, vertical: 5.5.h),
                                                            child: Text(
                                                              "Select",
                                                              style: TextStyle(fontSize: 14.sp, fontWeight: FontWeight.w700, color: Colors.white),
                                                            ),
                                                          )),
                                                    ],
                                                  )
                                                ],
                                                title: Text(
                                                  "Pick a color",
                                                  style: TextStyle(fontSize: 12.sp, fontWeight: FontWeight.w500, color: Colors.black),
                                                ),
                                                content: SingleChildScrollView(child: ColorPicker(pickerColor: pickerColor, onColorChanged: changeColor)),
                                              );
                                            },
                                          );
                                        },
                                        padding: EdgeInsets.all(0),
                                        icon: Icon(Icons.format_color_fill_sharp)),
                                  ],
                                ),
                                Expanded(
                                  child: GridView.builder(
                                    itemCount: colors.length,
                                    gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 7, crossAxisSpacing: 10.5, mainAxisSpacing: 8),
                                    padding: EdgeInsets.all(0),
                                    itemBuilder: (context, index) {
                                      final color = colors[index];
                                      return GestureDetector(
                                        onTap: () {
                                          setState(() {
                                            selectedColor = color;
                                            pickerColor = color;
                                          });
                                        },
                                        child: Container(
                                          width: 24.w,
                                          height: 24.h,
                                          decoration: BoxDecoration(
                                            shape: BoxShape.circle,
                                            color: color,
                                            border: Border.all(color: selectedColor == color ? Colors.black : Colors.transparent, width: 2),
                                          ),
                                        ),
                                      );
                                    },
                                  ),
                                )
                              ],
                            ),
                          ),
                        ),
                      IconButton(
                          onPressed: () {
                            setState(() {
                              _isColorPickerVisible = !_isColorPickerVisible;
                            });
                          },
                          style: IconButton.styleFrom(
                              backgroundColor: _isColorPickerVisible == true ? Color(0xFF6366F1) : Colors.white,
                              shape: CircleBorder(side: BorderSide(color: Color.fromRGBO(204, 204, 204, 1)))),
                          icon: SvgPicture.asset("assets/coloring_screen/Group 63.svg", color: _isColorPickerVisible == true ? Colors.white : Color(0xFF6808D0))),
                    ],
                  ),
                  Padding(
                    padding: EdgeInsets.only(bottom: 32.h),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Row(
                          children: [
                            IconButton(
                                onPressed: (mode == ColoringMode.brush && selectedPolygon != null && undoStack[selectedPolygon!] != null && undoStack[selectedPolygon!]!.isNotEmpty) ? _undo : null,
                                style: IconButton.styleFrom(
                                    shape: CircleBorder(side: BorderSide(color: Color.fromRGBO(204, 204, 204, 1)))),
                                icon: SvgPicture.asset("assets/coloring_screen/Vector4.svg",
                                    color: (mode == ColoringMode.brush && selectedPolygon != null && undoStack[selectedPolygon!] != null && undoStack[selectedPolygon!]!.isNotEmpty) ? null : Colors.grey)),
                            IconButton(
                                onPressed: (mode == ColoringMode.brush && selectedPolygon != null && redoStack[selectedPolygon!] != null && redoStack[selectedPolygon!]!.isNotEmpty) ? _redo : null,
                                style: IconButton.styleFrom(
                                    shape: CircleBorder(side: BorderSide(color: Color.fromRGBO(204, 204, 204, 1)))),
                                icon: SvgPicture.asset("assets/coloring_screen/Vector5.svg",
                                    color: (mode == ColoringMode.brush && selectedPolygon != null && redoStack[selectedPolygon!] != null && redoStack[selectedPolygon!]!.isNotEmpty) ? null : Colors.grey)),
                          ],
                        ),
                        Row(
                          children: [
                            TextButton(
                                onPressed: () {
                                  showDialog(
                                    context: context,
                                    builder: (context) {
                                      return Dialog(shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)), child: WinScreen());
                                    },
                                  );
                                },
                                style: TextButton.styleFrom(backgroundColor: Color(0xFF9654FE), shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(24))),
                                child: Padding(
                                  padding: EdgeInsets.symmetric(horizontal: 22.5.w, vertical: 7.5.h),
                                  child: Text("Draft", style: TextStyle(fontSize: 14.sp, fontWeight: FontWeight.w700, color: Colors.white)),
                                )),
                            SizedBox(width: 10.w),
                            TextButton(
                                onPressed: () {
                                  showDialog(
                                    context: context,
                                    builder: (context) {
                                      return Dialog(shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)), child: EarnScreen());
                                    },
                                  );
                                },
                                style: TextButton.styleFrom(backgroundColor: Color(0xFFAAAAAA), shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(24))),
                                child: Padding(
                                  padding: EdgeInsets.symmetric(horizontal: 22.5.w, vertical: 7.5.h),
                                  child: Text("Done", style: TextStyle(fontSize: 14.sp, fontWeight: FontWeight.w700, color: Colors.white)),
                                )),
                          ],
                        )
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}

// ====== Painter ======
class _MandalaPainter extends CustomPainter {
  final List<RegionInfo> regions;
  final Map<int, Color> polygonColors;
  final Map<int, List<_Stroke>> strokesByPolygon;
  final int? selectedPolygon;
  final double scale;
  final double offsetX;
  final double offsetY;

  _MandalaPainter({
    required this.regions,
    required this.polygonColors,
    required this.strokesByPolygon,
    required this.selectedPolygon,
    required this.scale,
    required this.offsetX,
    required this.offsetY,
  });

  @override
  void paint(Canvas canvas, Size size) {
    for (int i = 0; i < regions.length; i++) {
      var region = regions[i];
      if (region.points.isEmpty) continue;

      // Fill polygon
      if (polygonColors.containsKey(i)) {
        Paint fillPaint = Paint()
          ..color = polygonColors[i] ?? Colors.white
          ..style = PaintingStyle.fill;
        canvas.drawPath(region.path, fillPaint);
      }

      // Draw strokes clipped to region
      final strokes = strokesByPolygon[i];
      if (strokes != null && strokes.isNotEmpty) {
        canvas.save();
        canvas.clipPath(region.path);
        for (final stroke in strokes) {
          if (stroke.points.length < 2) continue;
          final paint = Paint()
            ..color = stroke.color
            ..style = PaintingStyle.stroke
            ..strokeWidth = stroke.width
            ..strokeCap = StrokeCap.round
            ..strokeJoin = StrokeJoin.round;

          final strokePath = Path();
          strokePath.moveTo(
            stroke.points.first.dx * scale + offsetX,
            stroke.points.first.dy * scale + offsetY,
          );
          for (int k = 1; k < stroke.points.length; k++) {
            strokePath.lineTo(
              stroke.points[k].dx * scale + offsetX,
              stroke.points[k].dy * scale + offsetY,
            );
          }
          canvas.drawPath(strokePath, paint);
        }
        canvas.restore();
      }

      // Draw border (highlight selected)
      Paint borderPaint = Paint()
        ..color = selectedPolygon == i ? Colors.red : Colors.black
        ..style = PaintingStyle.stroke
        ..strokeWidth = selectedPolygon == i ? 3.0 : 1.0;
      canvas.drawPath(region.path, borderPaint);
    }
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => true;
}

class _Stroke {
  final List<Offset> points;
  final Color color;
  final double width;
  _Stroke({required this.points, required this.color, required this.width});
}

class RegionInfo {
  final int label;
  final List<List<int>> points;
  Path path = Path();

  RegionInfo({required this.label, required this.points});

  void updatePath(double scale, double offsetX, double offsetY) {
    path.reset();

    if (points.isEmpty) return;

    double firstX = points[0][0] * scale + offsetX;
    double firstY = points[0][1] * scale + offsetY;
    path.moveTo(firstX, firstY);

    for (int i = 1; i < points.length; i++) {
      double x = points[i][0] * scale + offsetX;
      double y = points[i][1] * scale + offsetY;
      path.lineTo(x, y);
    }

    path.close();
  }
}